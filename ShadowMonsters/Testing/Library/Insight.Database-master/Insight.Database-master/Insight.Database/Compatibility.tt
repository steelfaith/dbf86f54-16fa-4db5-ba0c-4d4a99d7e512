<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.cs" #>
<#@ include file="GenericTypes.tt" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using System.Text;

#if NET35
namespace Insight.Database
{
<#
for (var typeCount = 5; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argList = GetGenericList(typeCount, "T{0} arg{0}");
#>
	/// <summary>
	/// An action that takes <#= typeCount #> values.
	/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
	/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> value.</typeparam>
<# } #>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <param name="arg<#= typeIndex #>">The value of the <#= ConvertToOrdinal(typeIndex) #> item.</param>
<# } #>
	public delegate void Action<<#= typeList #>>(<#= argList #>);

<# } #>

	/// <summary>
	/// Provides methods to create Tuples.
	/// </summary>
	public static class Tuple
	{
<#
for (var typeCount = 1; typeCount <= 7; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var typeAndArgList = GetGenericList(typeCount, "T{0} arg{0}");
	var argList = GetGenericList(typeCount, "arg{0}");
#>
		/// <summary>
		/// Creates a tuple that contains <#= typeCount #> items.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> item.</typeparam>
<# } #>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <param name="arg<#= typeIndex #>">The value of the <#= ConvertToOrdinal(typeIndex) #> item.</param>
<# } #>
		public static Tuple<<#= typeList #>> Create<<#= typeList #>>(<#= typeAndArgList #>)
		{
			return new Tuple<<#= typeList #>>(<#= argList #>);
		}

<# } #>

		internal static int CombineHashCodes(params int[] hashes)
		{
			int h = hashes[0];

			for (int i = 1; i < hashes.Length; i++)
				h = (((h << 5) + h) ^ hashes[i]);

			return h;
		}

		internal static int GetHashCode<T>(T t)
		{
			if (t == null)
				return 0;
			else
				return t.GetHashCode();
		}
	}

<#
for (var typeCount = 1; typeCount <= 7; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argList = GetGenericList(typeCount, "T{0} arg{0}");
#>
	/// <summary>
	/// A tuple that contains <#= typeCount #> items.
	/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
	/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> item.</typeparam>
<# } #>
	public class Tuple<<#= typeList #>>
	{
<#
for (var t = 1; t <= typeCount; t++)
{
#>
		/// <summary>
		/// Gets or sets the value of the <#= ConvertToOrdinal(t) #> item in the tuple.
		/// </summary>
		public T<#= t #> Item<#= t #> { get; private set; }
<# } #>

		/// <summary>
		/// Initializes a new instance of the Tuple class.
		/// </summary>
		public Tuple(<#= argList #>)
		{
<#
for (var t = 1; t <= typeCount; t++)
{
#>
			Item<#= t #> = arg<#= t #>;
<# } #>
		}

		/// <inheritdoc/>
		public override int GetHashCode()
		{
			return Tuple.CombineHashCodes(<#= GetGenericList(typeCount, "Tuple.GetHashCode(Item{0})") #>);
		}

		/// <inheritdoc/>
		public override bool Equals(object obj)
		{
			Tuple<<#= typeList #>> other = obj as Tuple<<#= typeList #>>;
			if (other == null)
				return false;

<#
for (var t = 1; t <= typeCount; t++)
{
#>
			if (Item<#= t #> == null && other.Item<#= t #> != null)
				return false;
			if (!Item<#= t #>.Equals(other.Item<#= t #>))
				return false;
<# } #>

			return true;
		}
	}

<# } #>
}
#endif
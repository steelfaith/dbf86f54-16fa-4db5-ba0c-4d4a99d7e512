<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.cs" #>
<#@ include file="GenericTypes.tt" #>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Insight.Database
{
<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, "T{0}");
	var argList = GetGenericList(typeCount, GenericArgumentFormat);
	var paramList = GetGenericList(typeCount, GenericParameterFormat);
#>
	/// <summary>
	/// Marker class that defines an object graph.
	/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) {#>
	/// <typeparam name="T<#= typeIndex #>">The type of the <#= ConvertToOrdinal(typeIndex) #> subobject in the graph.</typeparam>
<# } #>
	[SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "The classes are related by implementing multiple generic signatures.")]
	public class Graph<<#= typeList #>> : Graph<T1>
	{
		internal override OneToOne<T1> GetOneToOneMapping(Action<object[]> callback = null, Dictionary<Type, string> idColumns = null)
		{
			Action<<#= typeList #>> handler = null;
			if (callback != null)
				handler = (<#= String.Join(",", Enumerable.Range(1, typeCount).Select(i => String.Format(" T{0} t{0}", i)))#>) => callback(new object[] { <#= String.Join(",", Enumerable.Range(1, typeCount).Select(i => String.Format(" t{0}", i))) #> });

			return new OneToOne<<#= typeList #>>(handler, null, idColumns);
		}
	}

<# } #>
}

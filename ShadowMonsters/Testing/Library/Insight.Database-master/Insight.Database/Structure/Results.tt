<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.cs" #>
<#@ include file="..\GenericTypes.tt" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Insight.Database.Structure;

namespace Insight.Database
{
<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
	var prevTypeList = GetGenericList(typeCount-1, GenericTypeFormat);
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argList = GetGenericList(typeCount, GenericArgumentFormat);
	var paramList = GetGenericList(typeCount, GenericParameterFormat);
#>
	/// <summary>
	/// Encapsulates multiple sets of data returned from the database.
	/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
	/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> set of data.</typeparam>
<# } #>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance"), SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "The classes are related by implementing multiple generic signatures.")]
	public class Results<<#= typeList #>> : Results<<#= prevTypeList #>>
	{
		/// <summary>
		/// Gets the <#= ConvertToOrdinal(typeCount) #> set of data returned from the database.
		/// </summary>
		public IList<T<#= typeCount #>> Set<#= typeCount #> { get; internal set; }

		/// <inheritdoc/>
		public override void Read(IDbCommand command, IDataReader reader)
		{
			ResultsReader<<#= typeList #>>.Default.Read(command, this, reader);
		}

		/// <inheritdoc/>
		public override Task ReadAsync(IDbCommand command, IDataReader reader, CancellationToken cancellationToken)
		{
			return ResultsReader<<#= typeList #>>.Default.ReadAsync(command, this, reader, cancellationToken);
		}  

		/// <summary>
		/// Gets the default query reader for this class.
		/// </summary>
		/// <returns>A query reader that can read this class.</returns>
		/// <remarks>This is used by DynamicConnection</remarks>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000:DoNotDeclareStaticMembersOnGenericTypes")]
		public static new IQueryReader GetReader()
		{
			return ResultsReader<<#= typeList #>>.Default;
		}		  
	}

<# } #>
}
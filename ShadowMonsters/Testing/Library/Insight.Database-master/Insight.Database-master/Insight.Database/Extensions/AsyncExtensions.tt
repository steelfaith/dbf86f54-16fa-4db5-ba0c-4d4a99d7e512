<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="..\GenericTypes.tt" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Insight.Database.CodeGenerator;
using Insight.Database.Reliable;
using Insight.Database.Structure;

namespace Insight.Database
{
	/// <summary>
	/// Extension methods to support asynchronous database operations.
	/// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling"), SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1600:ElementsMustBeDocumented", Justification = "Documenting the internal properties reduces readability without adding additional information.")]
	public static partial class DBConnectionExtensions
    {
        #region Query Methods
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argList = GetGenericList(typeCount, GenericArgumentFormat);
	var paramList = GetGenericList(typeCount, GenericParameterFormat);
#>
		/// <summary>
		/// Create a command, execute it, and translate the result set. This method supports auto-open.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> set of data.</typeparam>
<# } #>
		/// <param name="connection">The connection to use.</param>
		/// <param name="sql">The sql to execute.</param>
		/// <param name="parameters">The parameter to pass.</param>
		/// <param name="commandType">The type of the command.</param>
		/// <param name="commandBehavior">The behavior of the command when executed.</param>
		/// <param name="commandTimeout">The timeout of the command.</param>
		/// <param name="transaction">The transaction to participate in it.</param>
		/// <param name="cancellationToken">The CancellationToken to use for the operation or null to not use cancellation.</param>
		/// <param name="outputParameters">An optional additional object to output parameters onto.</param>
		/// <returns>A data reader with the results.</returns>
		public static Task<IList<T1>> QueryAsync<<#= typeList #>>(
			this IDbConnection connection,
			string sql,
			object parameters = null,
			CommandType commandType = CommandType.StoredProcedure,
			CommandBehavior commandBehavior = CommandBehavior.Default,
			int? commandTimeout = null,
			IDbTransaction transaction = null,
			CancellationToken? cancellationToken = null,
			object outputParameters = null)
		{
			return connection.QueryAsync(sql, parameters, ListReader<<#= typeList #>>.Default, commandType, commandBehavior, commandTimeout, transaction, cancellationToken, outputParameters);
		}

		/// <summary>
		/// Create a command, execute it, and translate the result set. This method supports auto-open.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> set of data.</typeparam>
<# } #>
		/// <param name="connection">The connection to use.</param>
		/// <param name="sql">The sql to execute.</param>
		/// <param name="parameters">The parameter to pass.</param>
		/// <param name="commandBehavior">The behavior of the command when executed.</param>
		/// <param name="commandTimeout">The timeout of the command.</param>
		/// <param name="transaction">The transaction to participate in it.</param>
		/// <param name="cancellationToken">The CancellationToken to use for the operation or null to not use cancellation.</param>
		/// <param name="outputParameters">An optional additional object to output parameters onto.</param>
		/// <returns>A data reader with the results.</returns>
		public static Task<IList<T1>> QuerySqlAsync<<#= typeList #>>(
			this IDbConnection connection,
			string sql,
			object parameters = null,
			CommandBehavior commandBehavior = CommandBehavior.Default,
			int? commandTimeout = null,
			IDbTransaction transaction = null,
			CancellationToken? cancellationToken = null,
			object outputParameters = null)
		{
			return connection.QueryAsync(sql, parameters, ListReader<<#= typeList #>>.Default, CommandType.Text, commandBehavior, commandTimeout, transaction, cancellationToken, outputParameters);
		}

		/// <summary>
		/// Chain an asynchronous data reader task with a translation to a list of objects.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> set of data.</typeparam>
<# } #>
		/// <param name="task">The data reader task to continue.</param>
		/// <param name="cancellationToken">The CancellationToken to use for the operation or null to not use cancellation.</param>
		/// <returns>A task that returns the list of objects.</returns>
		public static Task<IList<T1>> ToListAsync<<#= typeList #>>(this Task<IDataReader> task, CancellationToken? cancellationToken = null)
		{
			return task.ToListAsync(OneToOne<<#= typeList #>>.Records, cancellationToken);
		}

<# } #>
		#endregion

        #region QueryResults Methods
<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argList = GetGenericList(typeCount, GenericArgumentFormat);
	var paramList = GetGenericList(typeCount, GenericParameterFormat);
#>
		/// <summary>
		/// Asynchronously executes a query that returns multiple result sets and reads the results.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> set of data.</typeparam>
<# } #>
		/// <param name="connection">The connection to use.</param>
		/// <param name="sql">The sql to execute.</param>
		/// <param name="parameters">The parameter to pass.</param>
		/// <param name="commandType">The type of the command.</param>
		/// <param name="commandBehavior">The behavior of the command when executed.</param>
		/// <param name="commandTimeout">The timeout of the command.</param>
		/// <param name="transaction">The transaction to participate in.</param>
		/// <param name="cancellationToken">The CancellationToken to use for the operation or null to not use cancellation.</param>
		/// <returns>The results object filled with the data.</returns>
		/// <param name="outputParameters">An optional additional object to output parameters onto.</param>
		public static Task<Results<<#= typeList #>>> QueryResultsAsync<<#= typeList #>>(
			this IDbConnection connection,
			string sql,
			object parameters = null,
			CommandType commandType = CommandType.StoredProcedure,
			CommandBehavior commandBehavior = CommandBehavior.Default,
			int? commandTimeout = null,
			IDbTransaction transaction = null,
			CancellationToken? cancellationToken = null,
			object outputParameters = null)
		{
			return connection.QueryAsync(sql, parameters, ResultsReader<<#= typeList #>>.Default, commandType, commandBehavior | CommandBehavior.SequentialAccess, commandTimeout, transaction, cancellationToken, outputParameters);
		}

		/// <summary>
		/// Asynchronously executes a query that returns multiple result sets and reads the results.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> set of data.</typeparam>
<# } #>
		/// <param name="connection">The connection to use.</param>
		/// <param name="sql">The sql to execute.</param>
		/// <param name="parameters">The parameter to pass.</param>
		/// <param name="commandBehavior">The behavior of the command when executed.</param>
		/// <param name="commandTimeout">The timeout of the command.</param>
		/// <param name="transaction">The transaction to participate in.</param>
		/// <param name="cancellationToken">The CancellationToken to use for the operation or null to not use cancellation.</param>
		/// <param name="outputParameters">An optional additional object to output parameters onto.</param>
		/// <returns>The results object filled with the data.</returns>
		public static Task<Results<<#= typeList #>>> QueryResultsSqlAsync<<#= typeList #>>(
			this IDbConnection connection,
			string sql,
			object parameters = null,
			CommandBehavior commandBehavior = CommandBehavior.Default,
			int? commandTimeout = null,
			IDbTransaction transaction = null,
			CancellationToken? cancellationToken = null,
			object outputParameters = null)
		{
			return connection.QueryAsync(sql, parameters, ResultsReader<<#= typeList #>>.Default, CommandType.Text, commandBehavior | CommandBehavior.SequentialAccess, commandTimeout, transaction, cancellationToken, outputParameters);
		}
<# } #>
        #endregion

        #region Single Methods
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argList = GetGenericList(typeCount, GenericArgumentFormat);
	var paramList = GetGenericList(typeCount, GenericParameterFormat);
#>
		/// <summary>
		/// Create a command, execute it, and translate the result set. This method supports auto-open.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> set of data.</typeparam>
<# } #>
		/// <param name="connection">The connection to use.</param>
		/// <param name="sql">The sql to execute.</param>
		/// <param name="parameters">The parameter to pass.</param>
		/// <param name="commandType">The type of the command.</param>
		/// <param name="commandBehavior">The behavior of the command when executed.</param>
		/// <param name="commandTimeout">The timeout of the command.</param>
		/// <param name="transaction">The transaction to participate in it.</param>
		/// <param name="cancellationToken">The CancellationToken to use for the operation or null to not use cancellation.</param>
		/// <param name="outputParameters">An optional additional object to output parameters onto.</param>
		/// <returns>A data reader with the results.</returns>
		public static Task<T1> SingleAsync<<#= typeList #>>(
			this IDbConnection connection,
			string sql,
			object parameters = null,
			CommandType commandType = CommandType.StoredProcedure,
			CommandBehavior commandBehavior = CommandBehavior.Default,
			int? commandTimeout = null,
			IDbTransaction transaction = null,
			CancellationToken? cancellationToken = null,
			object outputParameters = null)
		{
			return connection.QueryAsync(sql, parameters, SingleReader<<#= typeList #>>.Default, commandType, commandBehavior, commandTimeout, transaction, cancellationToken, outputParameters);
		}

		/// <summary>
		/// Create a command, execute it, and translate the result set. This method supports auto-open.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> set of data.</typeparam>
<# } #>
		/// <param name="connection">The connection to use.</param>
		/// <param name="sql">The sql to execute.</param>
		/// <param name="parameters">The parameter to pass.</param>
		/// <param name="commandBehavior">The behavior of the command when executed.</param>
		/// <param name="commandTimeout">The timeout of the command.</param>
		/// <param name="transaction">The transaction to participate in it.</param>
		/// <param name="cancellationToken">The CancellationToken to use for the operation or null to not use cancellation.</param>
		/// <param name="outputParameters">An optional additional object to output parameters onto.</param>
		/// <returns>A data reader with the results.</returns>
		public static Task<T1> SingleSqlAsync<<#= typeList #>>(
			this IDbConnection connection,
			string sql,
			object parameters = null,
			CommandBehavior commandBehavior = CommandBehavior.Default,
			int? commandTimeout = null,
			IDbTransaction transaction = null,
			CancellationToken? cancellationToken = null,
			object outputParameters = null)
		{
			return connection.QueryAsync(sql, parameters, SingleReader<<#= typeList #>>.Default, CommandType.Text, commandBehavior, commandTimeout, transaction, cancellationToken, outputParameters);
		}
<# } #>
		#endregion
    }
}

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.cs" #>
<#@ include file="..\GenericTypes.tt" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Insight.Database
{
	/// <summary>
	/// Extension methods for object mapping.
	/// </summary>
	public static partial class DBReaderExtensions
	{
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argList = GetGenericList(typeCount, GenericArgumentFormat);
	var paramList = GetGenericList(typeCount, GenericParameterFormat);
#>
		/// <summary>
		/// Converts an IDataReader to an enumerable. The reader is closed after all records are read.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> subobject.</typeparam>
<# } #>
		/// <param name="reader">The data reader.</param>
		/// <returns>An enumerable over the return results.</returns>
		/// <remarks>
		/// If you use this method and are relying on CommandBehavior.CloseConnection to close the connection, note that if all of the records are not read
		/// (due to an exception or otherwise), then the connection will leak until GC is run. Your code is responsible for closing the connection.
		/// </remarks>
		public static IEnumerable<T1> AsEnumerable<<#= typeList #>>(this IDataReader reader)
		{
			return reader.AsEnumerable(OneToOne<<#= typeList #>>.Records);
		}

		/// <summary>
		/// Converts an IDataReader to a list of objects.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> subobject.</typeparam>
<# } #>
		/// <param name="reader">The data reader.</param>
		/// <returns>A list of objects.</returns>
		public static IList<T1> ToList<<#= typeList #>>(this IDataReader reader)
		{
			return reader.AsEnumerable<<#= typeList #>>().ToList();
		}

		/// <summary>
		/// Converts an IDataReader to a single object.
		/// </summary>
<# for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++) { #>
		/// <typeparam name="T<#= typeIndex #>">The type of the data in the <#= ConvertToOrdinal(typeIndex) #> subobject.</typeparam>
<# } #>		/// <param name="reader">The data reader.</param>
		/// <returns>A list of objects.</returns>
		public static T1 Single<<#= typeList #>>(this IDataReader reader)
		{
			return reader.Single(OneToOne<<#= typeList #>>.Records);
		}

<# } #>
	}
}